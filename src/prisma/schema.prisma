generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
  admin
  user
}

enum StatusEnum {
  active
  inactive
}

model Users {
  id_users     Int      @id @default(autoincrement())
  username     String   @db.VarChar(50)
  email        String   @db.VarChar(100) @unique
  phoneNumber  String   @db.VarChar(15)
  password     String   @db.Text
  role         Role     @default(user)
  refresh_token String?  @db.Text
  image        String?  @db.Text
  created_at   DateTime @db.DateTime(6) @default(now())
  updated_at   DateTime @db.DateTime(6) @updatedAt @default(now())
  status       StatusEnum @default(inactive)
  Otp Otp[]
  Course Course[]
  Course_member CourseMember[]
  Post Post[]

  @@index([username], name: "idx_username")
  @@index([email], name: "idx_email")
}

model Otp {
  id_otp       Int        @id @default(autoincrement())
  otp          String     @db.VarChar(20)
  otp_expires  DateTime   @db.DateTime(6)
  created_at   DateTime   @db.DateTime(6) @default(now())
  updated_at   DateTime   @db.DateTime(6) @updatedAt @default(now())
  id_users     Int
  Users        Users      @relation(fields: [id_users],references: [id_users],onDelete: Cascade)

  @@index([otp])
}



model Course {
  id_course    Int        @id @default(autoincrement())
  id_users     Int        @db.Int
  course       String     @db.VarChar(40)
  desc_course  String     @db.Text
  academy      String     @db.VarChar(100)
  course_code  String     @db.VarChar(50)
  created_at   DateTime   @db.DateTime(6) @default(now())
  updated_at   DateTime   @db.DateTime(6) @updatedAt @default(now())
  user         Users      @relation(fields: [id_users], references: [id_users], onDelete: Cascade)
  @@index([course_code])
  Course Post[]
  CourseMember CourseMember[]
}

model CourseMember {
  id_member      Int          @id @default(autoincrement())
  id_course      Int          @db.Int
  id_users       Int          @db.Int
  status_member  StatusMember
  join_at        DateTime     @db.DateTime(6) @default(now())
  course         Course       @relation(fields: [id_course], references: [id_course], onDelete: Cascade)
  user           Users        @relation(fields: [id_users], references: [id_users], onDelete: Cascade)
}

enum StatusMember {
  instruktur
  member
  asisten
}

enum TypePost {
  Pengumuman
  Presensi
  Kuis
  Tugas
}

model Post {
  id_post   Int       @id @default(autoincrement())
  id_course Int       @db.Int
  id_users  Int       @db.Int
  judul     String    @db.VarChar(100)
  typePost  TypePost  
  created_at DateTime @db.DateTime(6) @default(now())
  updated_at DateTime @db.DateTime(6) @updatedAt @default(now())
  course    Course    @relation(fields: [id_course], references: [id_course], onDelete: Cascade)
  user      Users     @relation(fields: [id_users], references: [id_users], onDelete: Cascade)

  Pengumuman Pengumuman[]
  Tugas Tugas[]
}

model Pengumuman {
  id_pengumuman Int       @id @default(autoincrement())
  id_post       Int       @db.Int
  konten         String   @db.Text
  post           Post     @relation(fields: [id_post], references: [id_post], onDelete: Cascade)
}

enum AccetpType {
  Doc
  Pdf
  Ppt
}

model Tugas {
  id_tugas   Int    @id @default(autoincrement())
  id_post    Int       @db.Int
  deskripsi  String    @db.Text
  fromDate   DateTime  @db.DateTime(6) @default(now())
  toDate     DateTime  @db.DateTime(6) @default(now())
  file       String    @db.VarChar(255)
  accept     AccetpType 
  post       Post      @relation(fields: [id_post], references: [id_post], onDelete: Cascade)
}